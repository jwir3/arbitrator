const path = require("path");
const nodeExternals = require("webpack-node-externals");
const FriendlyErrorsWebpackPlugin = require("friendly-errors-webpack-plugin");
const IncludeFileWebpackPlugin = require('include-file-webpack-plugin');
const CopyPlugin = require('copy-webpack-plugin');

const translateEnvToMode = (env) => {
  if (env === "production") {
    return "production";
  }
  return "development";
};

module.exports = env => {
  return {
    target: "electron-renderer",
    mode: translateEnvToMode(env),
    node: {
      __dirname: false,
      __filename: false
    },
    externals: [nodeExternals()],
    resolve: {
      alias: {
        env: path.resolve(__dirname, `../config/env_${env}.json`),
        Strings: path.resolve(__dirname, '../config/strings.json'),
        helpers: path.resolve(__dirname, '../src/helpers'),
        arbitrator: path.resolve(__dirname, '../src/arbitrator'),
        menu: path.resolve(__dirname, '../src/menu'),
        assets: path.resolve(__dirname, '../app/assets'),
        images: path.resolve(__dirname, '../app/images'),
        styles: path.resolve(__dirname, '../src/stylesheets')
      },
      extensions: ['.js', '.scss']
    },
    devtool: "source-map",
    module: {
      rules: [
        {
          test: /\.js$/,
          exclude: /node_modules/,
          use: ["babel-loader"]
        },
        {
            test:/\.scss$/,
            use:['style-loader','css-loader', 'sass-loader']
        },
        {
          test: /\.svg$/,
          use: [
            {
              loader: 'file-loader',
              options: {
                outputPath: 'assets/images',
                name: '[name].[ext]'
              }
            }
          ]
        }
      ]
    },
    plugins: [
      new FriendlyErrorsWebpackPlugin({ clearConsole: env === "development" }),
      new IncludeFileWebpackPlugin({
        directory: path.resolve(__dirname, '../src/html'),
        input: '/app.html',
        output: '/app.html.autogenerated',
        processIncludeContents: function(html) {
          return html;
        }
      }),
      new CopyPlugin([
        {
          from: path.resolve(__dirname, '../src/html/app.html.autogenerated'),
          to: path.resolve(__dirname, '../app/app.html')
        }
      ]),
    ]
  };
};
